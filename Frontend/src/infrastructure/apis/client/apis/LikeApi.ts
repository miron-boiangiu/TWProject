/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LikeCheckResponseDTORequestResponse,
  RequestResponse,
} from '../models/index';
import {
    LikeCheckResponseDTORequestResponseFromJSON,
    LikeCheckResponseDTORequestResponseToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models/index';

export interface ApiLikeAddTorrentIdPostRequest {
    torrentId: string;
}

export interface ApiLikeCheckLikeTorrentIdPostRequest {
    torrentId: string;
}

export interface ApiLikeDeleteTorrentIdDeleteRequest {
    torrentId: string;
}

/**
 * 
 */
export class LikeApi extends runtime.BaseAPI {

    /**
     */
    async apiLikeAddTorrentIdPostRaw(requestParameters: ApiLikeAddTorrentIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters['torrentId'] == null) {
            throw new runtime.RequiredError(
                'torrentId',
                'Required parameter "torrentId" was null or undefined when calling apiLikeAddTorrentIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Like/Add/{torrentId}`.replace(`{${"torrentId"}}`, encodeURIComponent(String(requestParameters['torrentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiLikeAddTorrentIdPost(requestParameters: ApiLikeAddTorrentIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiLikeAddTorrentIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLikeCheckLikeTorrentIdPostRaw(requestParameters: ApiLikeCheckLikeTorrentIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LikeCheckResponseDTORequestResponse>> {
        if (requestParameters['torrentId'] == null) {
            throw new runtime.RequiredError(
                'torrentId',
                'Required parameter "torrentId" was null or undefined when calling apiLikeCheckLikeTorrentIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Like/CheckLike/{torrentId}`.replace(`{${"torrentId"}}`, encodeURIComponent(String(requestParameters['torrentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LikeCheckResponseDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiLikeCheckLikeTorrentIdPost(requestParameters: ApiLikeCheckLikeTorrentIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LikeCheckResponseDTORequestResponse> {
        const response = await this.apiLikeCheckLikeTorrentIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLikeDeleteTorrentIdDeleteRaw(requestParameters: ApiLikeDeleteTorrentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters['torrentId'] == null) {
            throw new runtime.RequiredError(
                'torrentId',
                'Required parameter "torrentId" was null or undefined when calling apiLikeDeleteTorrentIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Like/Delete/{torrentId}`.replace(`{${"torrentId"}}`, encodeURIComponent(String(requestParameters['torrentId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiLikeDeleteTorrentIdDelete(requestParameters: ApiLikeDeleteTorrentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiLikeDeleteTorrentIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
