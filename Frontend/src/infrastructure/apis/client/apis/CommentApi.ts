/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CommentAddDTO,
  CommentDTOPagedResponseRequestResponse,
  CommentUpdateDTO,
  RequestResponse,
} from '../models/index';
import {
    CommentAddDTOFromJSON,
    CommentAddDTOToJSON,
    CommentDTOPagedResponseRequestResponseFromJSON,
    CommentDTOPagedResponseRequestResponseToJSON,
    CommentUpdateDTOFromJSON,
    CommentUpdateDTOToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models/index';

export interface ApiCommentAddPostRequest {
    commentAddDTO?: CommentAddDTO;
}

export interface ApiCommentDeleteCommentIdDeleteRequest {
    commentId: string;
}

export interface ApiCommentGetPageGetRequest {
    torrentId?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiCommentUpdatePutRequest {
    commentUpdateDTO?: CommentUpdateDTO;
}

/**
 * 
 */
export class CommentApi extends runtime.BaseAPI {

    /**
     */
    async apiCommentAddPostRaw(requestParameters: ApiCommentAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Comment/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommentAddDTOToJSON(requestParameters['commentAddDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCommentAddPost(requestParameters: ApiCommentAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiCommentAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCommentDeleteCommentIdDeleteRaw(requestParameters: ApiCommentDeleteCommentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling apiCommentDeleteCommentIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Comment/Delete/{commentId}`.replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCommentDeleteCommentIdDelete(requestParameters: ApiCommentDeleteCommentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiCommentDeleteCommentIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCommentGetPageGetRaw(requestParameters: ApiCommentGetPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommentDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters['torrentId'] != null) {
            queryParameters['torrentId'] = requestParameters['torrentId'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Comment/GetPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCommentGetPageGet(requestParameters: ApiCommentGetPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommentDTOPagedResponseRequestResponse> {
        const response = await this.apiCommentGetPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCommentUpdatePutRaw(requestParameters: ApiCommentUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Comment/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CommentUpdateDTOToJSON(requestParameters['commentUpdateDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCommentUpdatePut(requestParameters: ApiCommentUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiCommentUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
