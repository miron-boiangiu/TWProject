/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InvitationDTOPagedResponseRequestResponse,
  InvitationDTORequestResponse,
} from '../models/index';
import {
    InvitationDTOPagedResponseRequestResponseFromJSON,
    InvitationDTOPagedResponseRequestResponseToJSON,
    InvitationDTORequestResponseFromJSON,
    InvitationDTORequestResponseToJSON,
} from '../models/index';

export interface ApiInvitationGetInvitationIdGetRequest {
    invitationId: string;
}

export interface ApiInvitationGetPageGetRequest {
    page?: number;
    pageSize?: number;
}

/**
 * 
 */
export class InvitationApi extends runtime.BaseAPI {

    /**
     */
    async apiInvitationGenerateGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvitationDTORequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Invitation/Generate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiInvitationGenerateGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvitationDTORequestResponse> {
        const response = await this.apiInvitationGenerateGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiInvitationGetInvitationIdGetRaw(requestParameters: ApiInvitationGetInvitationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvitationDTORequestResponse>> {
        if (requestParameters['invitationId'] == null) {
            throw new runtime.RequiredError(
                'invitationId',
                'Required parameter "invitationId" was null or undefined when calling apiInvitationGetInvitationIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Invitation/Get/{invitationId}`.replace(`{${"invitationId"}}`, encodeURIComponent(String(requestParameters['invitationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiInvitationGetInvitationIdGet(requestParameters: ApiInvitationGetInvitationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvitationDTORequestResponse> {
        const response = await this.apiInvitationGetInvitationIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiInvitationGetPageGetRaw(requestParameters: ApiInvitationGetPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvitationDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Invitation/GetPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiInvitationGetPageGet(requestParameters: ApiInvitationGetPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvitationDTOPagedResponseRequestResponse> {
        const response = await this.apiInvitationGetPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
